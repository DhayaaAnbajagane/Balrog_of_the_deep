"""
Compendium of information on the geometry of the DECam CCDs
"""
import calendar

amps = ('A','B') # Possible amplifier choices

shape = (4096,2048)  # Shape of the science array, in numpy format

def get_band(filter):
    # Function to return a short BAND string given the FILTER string
    band = filter.strip()[0]
    if band=='V':
        band = 'VR'
    elif band not in ('u','g','r','i','z','Y'):
        band = 'X'
    return band

def get_nite(date_obs):
    # Function to return standard NITE string from date-obs string
    # date_obs = 'YYYY-MM-DDTHH:MM:SS.S'
    v = date_obs.split(':')
    hh = int(v[0].split('-')[2][-2:])
    if hh > 14:
        nite = v[0][:-3].replace('-','')   
    else:
        y = int(v[0][0:4])
        m = int(v[0][5:7])
        d = int(v[0][8:10])-1
        if d==0:
            m = m - 1
            if m==0:
                m = 12
                y = y - 1
            d = calendar.monthrange(y,m)[1]
        nite = str(y).zfill(4)+str(m).zfill(2)+str(d).zfill(2)
    return nite    


# ccdnums is a dictionary mapping the DETPOS values into their CCDNUM values
ccdnums =  {'S29':  1,
            'S30':  2,
            'S31':  3,
            'S25':  4,
            'S26':  5,
            'S27':  6,
            'S28':  7,
            'S20':  8,
            'S21':  9,
            'S22':  10,
            'S23':  11,
            'S24':  12,
            'S14':  13,
            'S15':  14,
            'S16':  15,
            'S17':  16,
            'S18':  17,
            'S19':  18,
            'S8':  19,
            'S9':  20,
            'S10':  21,
            'S11':  22,
            'S12':  23,
            'S13':  24,
            'S1':  25,
            'S2':  26,
            'S3':  27,
            'S4':  28,
            'S5':  29,
            'S6':  30,
            'S7':  31,
            'N1':  32,
            'N2':  33,
            'N3':  34,
            'N4':  35,
            'N5':  36,
            'N6':  37,
            'N7':  38,
            'N8':  39,
            'N9':  40,
            'N10':  41,
            'N11':  42,
            'N12':  43,
            'N13':  44,
            'N14':  45,
            'N15':  46,
            'N16':  47,
            'N17':  48,
            'N18':  49,
            'N19':  50,
            'N20':  51,
            'N21':  52,
            'N22':  53,
            'N23':  54,
            'N24':  55,
            'N25':  56,
            'N26':  57,
            'N27':  58,
            'N28':  59,
            'N29':  60,
            'N30':  61,
            'N31':  62}

detpos_dict = {}
"""
A dictionary of detpos strings keyed on ccdnum values
"""
for k,v in ccdnums.items():
    detpos_dict[v] = k

"""
DECam CCD corners in pixel system where they are abutted into one big array
The format here is (x,y), with 1-indexed positions, a la FITS.
Note that x coord is offset by 2048 because of guide CCDs.
"""
ccdCorners = {'N1': ( 14337,     1),
              'N2': ( 14337,  4097),
              'N3': ( 14337,  8193),
              'N4': ( 14337, 12289),
              'N5': ( 14337, 16385),
              'N6': ( 14337, 20481),
              'N7': ( 14337, 24577),
              'N8': ( 16385,  2049),
              'N9': ( 16385,  6145),
              'N10': ( 16385, 10241),
              'N11': ( 16385, 14337),
              'N12': ( 16385, 18433),
              'N13': ( 16385, 22529),
              'N14': ( 18433,  2049),
              'N15': ( 18433,  6145),
              'N16': ( 18433, 10241),
              'N17': ( 18433, 14337),
              'N18': ( 18433, 18433),
              'N19': ( 18433, 22529),
              'N20': ( 20481,  4097),
              'N21': ( 20481,  8193),
              'N22': ( 20481, 12289),
              'N23': ( 20481, 16385),
              'N24': ( 20481, 20481),
              'N25': ( 22529,  6145),
              'N26': ( 22529, 10241),
              'N27': ( 22529, 14337),
              'N28': ( 22529, 18433),
              'N29': ( 24577,  8193),
              'N30': ( 24577, 12289), ###  dead CCD!!
              'N31': ( 24577, 16385),
              'S1': ( 12289,     1),
              'S2': ( 12289,  4097),
              'S3': ( 12289,  8193),
              'S4': ( 12289, 12289),
              'S5': ( 12289, 16385),
              'S6': ( 12289, 20481),
              'S7': ( 12289, 24577),
              'S8': ( 10241,  2049),
              'S9': ( 10241,  6145),
              'S10': ( 10241, 10241),
              'S11': ( 10241, 14337),
              'S12': ( 10241, 18433),
              'S13': ( 10241, 22529),
              'S14': (  8193,  2049),
              'S15': (  8193,  6145),
              'S16': (  8193, 10241),
              'S17': (  8193, 14337),
              'S18': (  8193, 18433),
              'S19': (  8193, 22529),
              'S20': (  6145,  4097),
              'S21': (  6145,  8193),
              'S22': (  6145, 12289),
              'S23': (  6145, 16385),
              'S24': (  6145, 20481),
              'S25': (  4097,  6145),
              'S26': (  4097, 10241),
              'S27': (  4097, 14337),
              'S28': (  4097, 18433),
              'S29': (  2049,  8193),
              'S30': (  2049, 12289),
              'S31': (  2049, 16385) }

"""
A dictionary giving the approx corner positions of each CCD on the sky, in degrees
from center of the focal plane.  Tuple is (xmin, xmax, ymin, ymax) with x to E and y to N.
"""
ccdBounds = {'N1': (-1.0811, -0.782681, -0.157306, -0.00750506),
             'N2': (-0.771362, -0.472493, -0.157385, -0.00749848), 
             'N3': (-0.461205, -0.161464, -0.157448, -0.00749265), 
             'N4': (-0.150127, 0.149894, -0.15747, -0.00749085), 
             'N5': (0.161033, 0.460796, -0.157638, -0.0074294), 
             'N6': (0.472171, 0.771045, -0.157286, -0.00740563), 
             'N7': (0.782398, 1.08083, -0.157141, -0.0074798), 
             'N8': (-0.92615, -0.627492, -0.321782, -0.172004), 
             'N9': (-0.616455, -0.317043, -0.322077, -0.172189), 
             'N10': (-0.305679, -0.00571999, -0.322071, -0.17217), 
             'N11': (0.00565427, 0.305554, -0.322243, -0.172254), 
             'N12': (0.31684, 0.616183, -0.322099, -0.172063), 
             'N13': (0.627264, 0.925858, -0.321792, -0.171887), 
             'N14': (-0.926057, -0.62726, -0.485961, -0.336213), 
             'N15': (-0.616498, -0.317089, -0.486444, -0.336606), 
             'N16': (-0.30558, -0.00578257, -0.486753, -0.336864), 
             'N17': (0.00532179, 0.305123, -0.486814, -0.33687), 
             'N18': (0.316662, 0.616018, -0.486495, -0.336537), 
             'N19': (0.62708, 0.92578, -0.485992, -0.336061), 
             'N20': (-0.770814, -0.471826, -0.650617, -0.500679), 
             'N21': (-0.460777, -0.161224, -0.650817, -0.501097), 
             'N22': (-0.149847, 0.149886, -0.650816, -0.501308), 
             'N23': (0.161001, 0.460566, -0.650946, -0.501263), 
             'N24': (0.47163, 0.770632, -0.650495, -0.500592), 
             'N25': (-0.615548, -0.316352, -0.814774, -0.665052), 
             'N26': (-0.305399, -0.00591217, -0.814862, -0.665489), 
             'N27': (0.00550714, 0.304979, -0.815022, -0.665418), 
             'N28': (0.316126, 0.615276, -0.814707, -0.664908), 
             'N29': (-0.46018, -0.16101, -0.97887, -0.829315), 
             'N31': (0.160884, 0.460147, -0.978775, -0.829426), 
             'S1': (-1.08096, -0.782554, 0.00715956, 0.15689), 
             'S2': (-0.7713, -0.47242, 0.0074194, 0.157269), 
             'S3': (-0.4611, -0.161377, 0.00723009, 0.157192), 
             'S4': (-0.149836, 0.150222, 0.00737069, 0.157441), 
             'S5': (0.161297, 0.461031, 0.0072399, 0.1572), 
             'S6': (0.472537, 0.771441, 0.00728934, 0.157137), 
             'S7': (0.782516, 1.08097, 0.00742809, 0.15709), 
             'S8': (-0.92583, -0.627259, 0.171786, 0.32173), 
             'S9': (-0.616329, -0.31694, 0.171889, 0.321823), 
             'S10': (-0.305695, -0.00579187, 0.172216, 0.322179), 
             'S11': (0.00556739, 0.305472, 0.172237, 0.322278), 
             'S12': (0.316973, 0.61631, 0.172015, 0.322057), 
             'S13': (0.627389, 0.925972, 0.171749, 0.321672), 
             'S14': (-0.925847, -0.627123, 0.335898, 0.48578), 
             'S15': (-0.616201, -0.316839, 0.336498, 0.486438), 
             'S16': (-0.305558, -0.00574858, 0.336904, 0.486749), 
             'S17': (0.00557115, 0.305423, 0.33675, 0.486491), 
             'S18': (0.316635, 0.615931, 0.33649, 0.486573), 
             'S19': (0.627207, 0.925969, 0.336118, 0.485923), 
             'S20': (-0.770675, -0.471718, 0.500411, 0.65042), 
             'S21': (-0.46072, -0.161101, 0.501198, 0.650786), 
             'S22': (-0.149915, 0.14982, 0.501334, 0.650856), 
             'S23': (0.160973, 0.460482, 0.501075, 0.650896), 
             'S24': (0.47167, 0.770647, 0.50045, 0.650441), 
             'S25': (-0.615564, -0.316325, 0.66501, 0.814674), 
             'S26': (-0.30512, -0.0056517, 0.665531, 0.81505), 
             'S27': (0.00560886, 0.305082, 0.665509, 0.815022), 
             'S28': (0.316158, 0.615391, 0.665058, 0.814732), 
             'S29': (-0.46021, -0.160988, 0.829248, 0.978699), 
             'S30': (-0.150043, 0.149464, 0.829007, 0.978648), 
             'S31': (0.160898, 0.460111, 0.82932, 0.978804) }

""" Now build another dictionary that gives the CCD centers on the sky in degree system again.
These will be (x,y) tuples.
"""
ccdCenters = {}
for detpos,bounds in ccdBounds.items():
    ccdCenters[detpos] = ( 0.5*(bounds[0]+bounds[1]), 0.5*(bounds[2]+bounds[3]))

def minimalHeader(detpos, h=None):
    """
    Add to the dict-like object h a minimal set of header keyword/value pairs
    needed to show the mosaic on DS9, plus DETSEC info that give IRAF-style mosaic display.
    Plus the DETPOS and CCDNUM values, with the EXTNAME set to the detpos
    If h is None, a new dict is created.
    Returns h 
    """
    if h is None:
        h = {}
    ccdnum = ccdnums[detpos]
    h['CCDNUM'] = ccdnum
    h['DETPOS'] = detpos
    h['EXTNAME'] = detpos
    h['CRVAL1'] = 0.
    h['CRVAL2'] = 0.
    h['CD1_1'] = 0.
    h['CD1_2'] = +7.286e-5
    h['CD2_2'] = 0.
    h['CD2_1'] = -7.286e-5
    h['CTYPE1'] = 'RA---TAN'
    h['CTYPE2'] = 'DEC--TAN'
    x,y = ccdCorners[detpos]
    h['DETSEC']='[{:d}:{:d},{:d}:{:d}]'.format(x, x+2047, y, y+4095)
    h['CRPIX2']=14826.- ((y-1)/2048)*2129.6667
    h['CRPIX1']=13423.2- ((x-1)/2048)*2254.4
    
    return h
